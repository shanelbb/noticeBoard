{"version":3,"sources":["assets/headerIllustration.png","firebase.js","Header.js","Likes.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","props","className","action","onSubmit","submit","type","tabIndex","aria-label","htmlFor","onChange","userInput","id","placeholder","maxLength","value","values","recipient","message","sender","src","headerIllustration","alt","Likes","state","liked","onClick","likeButton","noticeId","setState","disabled","this","role","likes","Component","Main","notices","map","notice","i","key","datePosted","App","handleSubmit","e","preventDefault","Date","toDateString","database","ref","push","document","getElementById","scrollIntoView","block","behavior","swal","handleLikeButton","newNotices","update","handleUserInput","target","on","response","newState","data","val","unshift","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.28261ae7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headerIllustration.5cc01f50.png\";","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDmSix-wdSV4tDARg3NL-kualIgw0uRz0s\",\n    authDomain: \"noticeboard-b9420.firebaseapp.com\",\n    databaseURL: \"https://noticeboard-b9420.firebaseio.com\",\n    projectId: \"noticeboard-b9420\",\n    storageBucket: \"noticeboard-b9420.appspot.com\",\n    messagingSenderId: \"595528946730\",\n    appId: \"1:595528946730:web:d9053d6e53bd9e36405f53\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  export default firebase;","import React from \"react\";\nimport headerIllustration from \"./assets/headerIllustration.png\";\nimport \"./styles/Header.scss\";\n\nconst Header = (props) => {\n  return (\n    <header className=\"wrapper\">\n      <h1>Notice Board</h1>\n      <p className=\"headingText\">\n        Have you noticed something nice about someone you know lately? Let them\n        know you’re thinking of them by leaving a note on our notice board.\n      </p>\n      <section className=\"headerEls\">\n        <div className=\"newNotice\">\n          <h2>New Notice</h2>\n\n          {/* handleSubmit function runs here when form is submitted */}\n          <form action=\"\" onSubmit={props.submit}>\n            <button\n              type=\"submit\"\n              className=\"plus\"\n              tabIndex=\"0\"\n              aria-label=\"addNotice\"\n            >\n              +\n            </button>\n            {/* visuallyHidden label for accessiblity */}\n            <label htmlFor=\"recipient\" className=\"visuallyHidden\">\n              Name of your recipient (required)\n            </label>\n            <input\n              tabIndex=\"0\"\n              // runs handleUserInput function when user types in the input\n              onChange={props.userInput}\n              id=\"recipient\"\n              type=\"text\"\n              className=\"name\"\n              placeholder=\"Name of your recipient *\"\n              maxLength=\"30\"\n              // updates the value of the input based on state that is being updated from handleUserInput function\n              value={props.values.recipient}\n            />\n            <label htmlFor=\"message\" className=\"visuallyHidden\">\n              What did you notice? (required)\n            </label>\n            <textarea\n              tabIndex=\"0\"\n              onChange={props.userInput}\n              id=\"message\"\n              type=\"text\"\n              className=\"newMessage\"\n              placeholder=\"What did you notice? *\"\n              maxLength=\"250\"\n              value={props.values.message}\n            />\n            <label htmlFor=\"sender\" className=\"visuallyHidden\">\n              Your Name (optional)\n            </label>\n            <input\n              tabIndex=\"0\"\n              onChange={props.userInput}\n              id=\"sender\"\n              type=\"text\"\n              className=\"senderName\"\n              placeholder=\"Your Name (optional)\"\n              maxLength=\"30\"\n              value={props.values.sender}\n            />\n          </form>\n          <p className=\"required\">* = Required Field</p>\n        </div>\n        <div className=\"illustration\">\n          <img\n            src={headerIllustration}\n            alt=\"Illustration of a person walking up to a wall with notes pinned to it.\"\n          />\n        </div>\n      </section>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Likes extends Component {\n  constructor() {\n    super();\n    // sets liked state to false by default\n    this.state = {\n      liked: false,\n    };\n  }\n  render() {\n    return (\n      <div className=\"likesContainer\">\n        <button\n          className=\"likes\"\n          // runs handleLikeButton function when heart is clicked\n          onClick={() => {\n            this.props.likeButton(this.props.noticeId);\n            // toggles liked state to true which disables the button so user can't like a post more than once.\n            this.setState({ liked: true });\n          }}\n          disabled={this.state.liked}\n          tabIndex=\"0\"\n        >\n          <span aria-label=\"heart emoji like button\" role=\"img\">\n            ❤️\n          </span>{\" \"}\n          {/* displays number of likes */}\n          {this.props.likes}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Likes;\n","import React from \"react\";\nimport \"./styles/Main.scss\";\nimport Likes from \"./Likes\";\n\nconst Main = (props) => {\n  return (\n    <main className=\"wrapper\" id=\"notices\">\n      <h4>Notices:</h4>\n      <section className=\"notices\">\n        {/* maps over each notice from notices array in state */}\n        {props.notices.map((notice, i) => {\n          // displays a notice for each entry on the page\n          return (\n            <div key={i} className=\"notice\">\n              {/* displays the date the notice was posted */}\n              <p className=\"date\">{notice.datePosted}</p>\n              {/* displays the content of the notice */}\n              <h3 className=\"hi\">Hi {notice.recipient}!</h3>\n              <p className=\"message\">{notice.message}</p>\n              <h5 className=\"from\">From {notice.sender || \"Anonymous\"}</h5>\n              {/* displays the like button */}\n              <Likes\n                // passes the props down from App.js\n                likeButton={props.likeButton}\n                noticeId={notice.noticeId}\n                likes={notice.likes}\n              />\n            </div>\n          );\n        })}\n      </section>\n    </main>\n  );\n};\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport swal from \"sweetalert\";\n\nimport \"./styles/App.scss\";\n\nimport Header from \"./Header\";\nimport Main from \"./Main\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // empty array where the content of each notice will be stored\n      notices: [],\n      recipient: \"\",\n      message: \"\",\n      sender: \"\",\n    };\n  }\n\n  componentDidMount() {\n    // stores the database in a variable\n    const dbRef = firebase.database().ref();\n\n    // retrieves data from firebase\n    dbRef.on(\"value\", (response) => {\n      // new variable with an empty array where new data will be pushed in setState\n      const newState = [];\n      // response from firebase is stored in data variable\n      const data = response.val();\n      // loops throught the data and pushes each object to the newState array. Use unshift to\n      // put newest objects at the beginning of the array\n      for (let key in data) {\n        newState.unshift({\n          noticeId: key,\n          recipient: data[key].recipient,\n          message: data[key].message,\n          sender: data[key].sender,\n          likes: data[key].likes,\n          datePosted: data[key].datePosted,\n        });\n      }\n      // updates state with data that was pushed to the newState array\n      this.setState({\n        notices: newState,\n      });\n    });\n  }\n\n  // This functon runs when the + button is clicked\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // takes the keys and values and make them into an object\n    const userInput = {\n      recipient: this.state.recipient,\n      message: this.state.message,\n      sender: this.state.sender,\n      likes: 0,\n      datePosted: new Date().toDateString(),\n    };\n    //Sends the userInput object to the database so long as recipient and message inputs are not blank\n    if (userInput.recipient !== \"\" && userInput.message !== \"\") {\n      const dbRef = firebase.database().ref();\n      dbRef.push(userInput);\n      // scrolls to notices board once user has submitted their notice\n      document.getElementById(\"notices\").scrollIntoView({\n        block: \"start\",\n        behavior: \"smooth\",\n      });\n      // empties user inputs and updates state\n      this.setState({\n        recipient: \"\",\n        message: \"\",\n        sender: \"\",\n      });\n    } else {\n      // error message displays when user hasn't filled out required fields\n      swal(\"Uh-oh!\", \"You need to fill in the required fields.\");\n    }\n  };\n\n  // This function runs when the like (heart) button is clicked\n  handleLikeButton = (noticeId) => {\n    // makes a copy of state in a new variable\n    const newState = { ...this.state };\n    // new variable that contains the current state.notices array\n    const notices = newState.notices;\n\n    // new variable that maps over the notices array\n    const newNotices = notices.map((notice, i) => {\n      // checks if the noticeId of the notice that is clicked matches the noticeId in firebase\n      if (notices[i].noticeId === noticeId) {\n        // increments the notices by 1\n        notice.likes = notice.likes + 1;\n\n        // updates the number of likes in the database\n        const dbRef = firebase.database().ref(noticeId);\n        dbRef.update({\n          likes: notice.likes,\n        });\n      }\n      return notice;\n    });\n    // updates state to reflect the new number of likes\n    this.setState({\n      notices: newNotices,\n    });\n  };\n\n  // Listens for user input, updates state to reflect that input\n  handleUserInput = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  render() {\n    return (\n      <>\n        {/* Header goes here. */}\n        <div className=\"headerBG largeWrapper\">\n          <Header\n            submit={this.handleSubmit}\n            userInput={this.handleUserInput}\n            values={this.state}\n          />\n        </div>\n        {/* Main body goes here */}\n        <div className=\"mainBG largeWrapper\">\n          <Main\n            notices={this.state.notices}\n            likeButton={this.handleLikeButton}\n          />\n        </div>\n\n        {/* footer starts here */}\n        <footer className=\"largeWrapper\">\n          <p>\n            &#169;{\" \"}\n            <a\n              href=\"https://shanelbeebe.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Shanel Beebe\n            </a>{\" \"}\n            2020\n          </p>\n          <p>\n            Illustration by{\" \"}\n            <a\n              href=\"https://undraw.co/illustrations\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {\" \"}\n              undraw.co\n            </a>\n          </p>\n        </footer>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}